#!/usr/bin/env node
import "core-js/stable";
import "regenerator-runtime/runtime";
/**
 * Module dependencies.
 */

import app from "./../config/express";

const debug = require("debug")("wb:server");
import http from "http";
import https from "https";
import fs from "fs";
import path from "path";

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const createServer = () => {
  if (process.env.DOMAIN) {
    const privateKeys = fs.readFileSync(
      path.resolve(`/etc/letsencrypt/live/${process.env.DOMAIN}/privkey.pem`),
      "utf8"
    );
    const cert = fs.readFileSync(
      path.resolve(`/etc/letsencrypt/live/${process.env.DOMAIN}/cert.pem`),
      "utf8"
    );
    const ca = fs.readFileSync(
      path.resolve(`/etc/letsencrypt/live/${process.env.DOMAIN}/chain.pem`),
      "utf8"
    );
    return https.createServer({ key: privateKeys, cert: cert, ca: ca }, app);
  } else {
    return http.createServer(app);
  }
};
const server = createServer();

/**
 * Listen on provided port, on all network interfaces.
 */
// console.log(port)
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log("listening on port " + addr.port);
}
